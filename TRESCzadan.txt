Zadanie 1
Napisz funkcjê, która odwróci podanego stringa.


Zadanie 2
Napisz funkcjê, która przyjmie dwa stringi i zwróci ile liter maj¹ wspólnych.


Zadanie 3
Napisz klasê StringConverter, która bedzie mia³a dwie metody (statyczne):
std::string toCamelCase(std::string )
std::string toSnakeCase(std::string )
camelCase : snake_case
helloSDA : hello_S_D_A
getColour : get_colour
isThisFirstEntry : is_this_first_entry


Zadanie 4
Napisz klasê, która umo¿liwi kodowanie i dekodowanie stringa na alfabet Morsea. Ignorujemy znaki specjalne
KlasaMorseCodeTranslator
toMorseCode
fromMorseCode
https://morsecode.world/international/translator.html


Zadanie 5
Klasa: StringCensor
Napisz klasê która bêdzie cenzurowaæ podane stringi (zamieniaæ wymagane litery na gwiazkê), operacje która ma wspieraæ ta klasa:
- addCensoredLetter(char c)
- std::string censor(std::string)


Zadanie 6
Stwórz listê liczb od 1 do 1000. Rozdziel te liczby na dwie osobne listy: liczby pierwsze i nie liczby pierwsze. 

Zadanie  7
Stworz listê 50 liczb ca³kowitych dodatnich i wype³nij j¹ losowymi wartoœciami. Wypisz j¹.
Nastêpnie posortuj i wypisz listê tak, by na pocz¹tku znalaz³y siê wartoœci parzyste uporz¹dkowane rosn¹co, a za nimi wartoœci nieparzyste uporz¹dkowane malej¹co.
Podpowiedz: Podziel listê na dwie osobne, odpowiednio posortuj, a nastêpnie ja po³¹cz w jedn¹.

Zadanie 8
Klasy: Rectangle(przechowuje d³ugoœci boków, wylicza pole, isSquare()), RectangleGenerator(Klasa genreuj¹ca losowy prostok¹t o boku z podanego przedzia³u), RectangleManger(tutaj faktycznie implementujemy zadania)
Utwórz wektor 100 prostok¹tów o losowych d³ugoœciach boków z przedzia³u 0, 10 (u¿yj liczb ca³kowitych)
a) void printRectangles() - Wypisz wszystkie prostok¹ty (for_each + unary function)
b) size_t countRectangleBiggerThen(int area ) - Wypisz ile jest prostok¹tów o polu wiêkszym ni¿ 50 (count_if)
c) std::vector copyRectangles() - Przekopiuj wszystkie prostk¹ty, które s¹ kwadratami do drugiego vectora (copy_if) i go wypisz (for_each)
d) void sortAreaDescending() - Posortuj vector prostok¹tów malejaco wed³ug pola powierzchni
e) void deleteInvalid() Usuñ wszystkie prostok¹ty, które maj¹ przynajmniej jeden bok równy 0

Zadanie 9
Szyfr Cezara - zwany szyfrem przesuwnym.
+std::string cypher(std::string text, int secretValue)
+std::string decepher(std::string text, int secretValue)
https://pl.wikipedia.org/wiki/Szyfr_Cezara

Zadanie 10
Stwórz klasê BigInt, która bêdzie mog³a przechowywaæ dowolnie du¿¹ liczbê ca³kowit¹.
Do implementacji mo¿esz u¿yæ wewn¹trz stringa lub tablicy dynamicznej std::vector<short>.
Zaimplementuj:
c-tor domyslny (daje 0)
c-tor z 1 parametrem (long long)
c-tor kopiuj¹cy
toString()
operator=
operator+
operator*
operator/
operator%
Wszystkie operatory porównania (Przypominam, ¿e wystarczy zaimplementowaæ 1, a potem za jego pomoc¹ resztê)

Uwaga! Napisz testy.

Zadanie 11
a) Korzystaj¹c z implementacji BigInt i z poprzedniego zadania zaimplementuj funkcje: silnia i fibonacci.
b) Nastêpnie zaimplementuj te metody korzystaj¹c ze standardowego long long.
c) Porównaj dla jakich parametrów long long ju¿ nie jest w stanie wyliczyæ kolejnych wartoœci.
d) (Opcjonalnie) Zmierz i porównaj czas wyliczania wartoœci dla parametrow od 1 do wartoœci znalezionej w punkcie c.
d) (Opcjonalnie) Wylicz i zmierz czas obliczania 90!

Zadanie 12
Stwórz klasê bufora cyklicznego: CircularBuffer
https://en.wikipedia.org/wiki/Circular_buffer
Proponowane metody (jak chcesz to zawsze mozna dodac wiecej).
c-tor - 1 argument, na ile elementów utworzyæ bufor
push_back
pop_back
pop_front
operator[]
front()
back()
size()
capacity()
resize()
insert(pos, T);
Trudniejsze zadania:
forward iterator i reverse_iterator
insert(iterator, T);
Uwaga! Napisz testy.

Zadanie 13
Napisz gre w zgadywanie numeru. Program losuje liczbe z przedzia³u 1-100, a uzytkownik proboje zgadn¹æ. 
Po kazdej próbie program podpowiada czy liczba jest wiêksza czy mniejsza od podanej przez gracza. Gdy, gracz jest 
blisko (np +- 3) to program powinien dodatkowo powiadomiæ gracza o tym, ¿e jest blisko. 
Zadanie mo¿na rozwi¹zac za pomoc¹ jednej klasy GuessTheNumber

Zadanie 14
Napisz program, który wypisze najbardziej optymalny schemat wydawania reszty dla podanej kwoty. 
(nomina³y: 200,100,50,20,10,5,2,1,0.50,0.20,0.10,0.05,0.02,0.01)

Zadanie 15
Napisz program, który zasymuluje rzut monet¹. Wczytaj od uzytkownika ile prób ma zostaæ wygenerowane, a nastêpnie wypisz:
- wszystkie wylosowane wartoœci (w postaci ORRORORORRROOORRORO), po 20 wartoœci na 1 wiersz
- iloœæ wylosowanych or³ów i reszek wraz z ich procentowym udzia³em
- najdlu¿szy ci¹g samych or³ów i samych reszek, wraz z ich d³ugoœciami i od której próby siê zacz¹³ ten ci¹g
- (! trudne) najd³u¿szy ci¹g gdzie orze³ i reszka wystêpuj¹ na zmianê (OROROROROROR)

Zadanie 16
Napisz funkcje szabonowe (podobne do tych z STL):
a) Funkjcê która potrafi wype³niæ kontner n kolejnymi wartoœciami przekazanymi przez uzytkownika
template <typename OutputIterator, typename SizeType, typename ValueType>
void iota_n(OutputIterator dest, SizeType n, ValueType value)
Co robi iota to mozemy sobie przypomnieæ tutaj: https://en.cppreference.com/w/cpp/algorithm/iota
b) Funkcjê, która podobnie jak for_each wywo³a podan¹ funkcjê z tym ¿e nie dla ka¿dego elementu, a co n elementów
template< class InputIt, class Size, class UnaryFunction >
constexpr InputIt for_each_n( InputIt first, InputIt last, Size n, UnaryFunction f );

Zadanie 17
Utwórz klasê Employee (first_name, last_name, email, gender(enum!), salary, login, password ).
Do obs³ugi pliku stwórz sobie klasy EmployeeFileReader, EmployeeFileWriter. Sproboj samemu je zaprojektowaæ.
Dane wczytaj z pliku employee_input.csv.
Jego struktura jest nastêpuj¹ca:
first_name,last_name,email,gender,salary

a) Dla ka¿dego pracownika wygeneruj unikalny login
login powinien byc wygenerowany jako dwie pierwsze litery nazwiska i imienia, 
a je¿eli ju¿ taki jest zajêty to dodajmy kolejne litery nazwiska, a¿ do uzyskania wolnego loginu,
np: Roby Helian -> rohe
Robert Hello -> rohel
Rose Helian -> roheli
Robert Helian -> rohelian1
b) Wygeneruj dla ka¿dego pracownika losowe has³o sk³adaj¹ce siê z:
- od 8-12 znaków (losowo)
- przynajmniej 1 litery (me³e i duze), 1 cyfry i 1 znaku specjalnego (ze zbioru: !?@#$%&+=-)
A nastêpnie zapisz do pliku passwords.csv loginy, adresy email i has³a w formacie:
login,mail,password
c)Wylicz statystyki:
- Iloœæ osób o imieniu na ka¿d¹ z liter alfabetu
- Iloœæ unikalnych imion, oraz najczêœciej wystêpuj¹ce imiê (lub imiona jeœli maj¹ tak¹ sam¹ czêstotliwoœæ)
- Œrednie zarobki wszystkich pracowników, œrednie zarobki kobiet i mê¿czyzn
d) Do pliku top10_salary.csv wypisz imiona, nazwiska i zarobki 10 najlepiej op³acanych osób
a do pliku least10_salary.csv wypisz imiona, nazwiska i zarobki 10 najgorzej zarabiaj¹cych osób
